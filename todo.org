#+title: Todo

* TODO all endpoints
** Placements
*** DONE GET all
**** DONE available
**** TODO min-age param
**** TODO max-age param
**** TODO unit param
*** DONE POST
**** DONE save request as part of the placement
*** DONE GET one
*** DONE DELETE one
** Accounts
*** DONE GET one
*** DONE PUT (mark for cleanup)
** Lifecycle
*** DONE STOP
*** DONE START
*** DONE STATUS
* DONE validate requests using the openAPI schema
* DONE embed the schema in binary
* DONE add credential type
* DONE add AccountWithCreds
* DONE test postgresql down, and up again
* DONE script to push/create/update AWS lambda function
* DONE create OpenAPIValidation middleware for schema validation
* DONE create openapi internal router from doc at startup, not on every request
* DONE use go-chi instead of httprouter:
** 100% compatible with standard library
** nice interface for middleware
* DONE make clean
* DONE /api/v1/accounts/{name}  won't work when we have other cloud providers.  do /api/v1/accounts/{kind}/{name} instead
* DONE Decrypt using ansible-vault (MVP only)
* DONE auth token errors output should be JSON too, not text.
* DONE rename Book() to Request() ?
* DONE add JWT for auth
** DONE protect routes with middleware and JWT
** DONE add POST /admin/jwt
*** DONE save token name+iat into DB
*** DONE check db in Authenticator middleware
*** DONE PUT /admin/jwt/{id}/invalidate to invalidate one token
** DONE GET /admin/jwt   to list login tokens
* DONE create OCI image
* DONE create helm chart
* DONE lifecycle worker pool
** DONE publish/subscribe channels
** DONE dispatcher listener worker
** DONE define AWS credential (root account) to manage the sandbox lifecycle -- use the same as dynamodb access
** DONE claim latest Job, cancel and delete previous jobs if any
** DONE create lifecycle handler for accounts
** DONE create golang channel for stop/start
** DONE parameterize the number of concurrent workers
** DONE create lifecycle handler for placements
*** DONE test legacy placement/stop/start/status
*** DONE proper lifecyclePlacementResponse with examples
* DONE OpenShift limit and req for pods
* DONE unit tests and fixture/functional tests
* TODO patch clients (sandbox-list, mark_for_cleanup script, etc) to use the sandbox-API instead of dynamodb
* TODO documentation coverage
* TODO move handlers per version?
* DONE mark sandbox for cleanup once migrate from prod to dev
* DONE add hurl to the admin image
* Post MVP
** TODO unit tests fixture/functional tests
** TODO prometheus endpoint and metrics
** TODO Encrypt IAM secret key using AWS KMS instead of ansible-vault.  Use and support both while transitioning
** TODO aws lambda function to replicate changes from dynamoDB to postgresql
** TODO add POST /refresh   to get new access token
** TODO Prometheus endpoint
** TODO rename env variable:  prefix with DYNAMODB_ for anything related to dynamodb access
** TODO Reservations
*** DONE functional tests (hurl)
*** sandbox-api
**** DONE Update OpenAPI schema to support passing the group parameter
**** DONE patch handlers
***** DONE safeguard: do not allow reservation if capacity (after reservation) is <20%
*** TODO conan: preserve reservation when cleaning up
*** TODO update AWS sandbox prometheus endpoint to show reservation information
*** TODO update sandbox-list: add reservation column
*** TODO patch legacy scripts to filter out accounts that are in a reservation
*** TODO expiration
**** make sure a comment is added to accounts when their expiration expires, so we can find them back.
